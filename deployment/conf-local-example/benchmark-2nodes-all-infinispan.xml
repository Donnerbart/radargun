<!-- RadarGun 2.0 benchmark -->
<benchmark xmlns="urn:radargun:benchmark:2.0">

   <!-- Specifies where should the master open socket  -->
   <master bindAddress="${master.address:172.16.16.206}" port="${master.port:2103}"/>

   <!-- List of cluster configurations where the benchmark should run-->
   <clusters>
      <!-- Equivalent to <cluster size="2" /><cluster size="3" /><cluster size="4" /> -->
      <scale from="2" to="${slaves:2}" inc="1">
         <!-- No groups defined within the cluster -->
         <cluster/>
      </scale>
   </clusters>

   <!-- List of configurations of the services -->
   <configurations>
      <!--
      <config name="Infinispan 5.2.x">
         <setup plugin="infinispan52" file="hazelcast.xml"/>
      </config>
      <config name="Infinispan 5.3.x">
         <setup plugin="infinispan53" file="hazelcast.xml"/>
      </config>
      -->
      <config name="Infinispan 6.0.x">
         <setup plugin="infinispan60" file="hazelcast.xml"/>
      </config>
      <config name="Infinispan 7.0.x">
         <setup plugin="infinispan70" file="hazelcast.xml"/>
      </config>
   </configurations>

   <!-- Sequence of stages executed on the cluster -->
   <scenario>
      <!-- Start services on all nodes -->
      <service-start/>
      <!-- Begin monitoring of CPU, memory usage and GC -->
      <jvm-monitor-start/>

      <!-- Preload the cache with data -->
      <load-data num-entries="5000" cache-selector="all:default"/>
      <load-data num-entries="5000" cache-selector="all:transactional"/>

      <!-- 5 threads will execute total of 100,000 random requests against the default cache -->
      <!-- As the test is called 'warmup', performance statistics won't be reported -->
      <basic-operations-test test-name="warmup" num-requests="1000" num-threads-per-node="5"
                             cache-selector="all:default">
         <key-selector>
            <concurrent-keys total-entries="500"/>
         </key-selector>
      </basic-operations-test>
      <basic-operations-test test-name="warmup" num-requests="1000" num-threads-per-node="5"
                             cache-selector="all:transactional">
         <key-selector>
            <concurrent-keys total-entries="500"/>
         </key-selector>
      </basic-operations-test>

      <!-- Remove all data from the default cache -->
      <clear-cache cache-name="default"/>
      <clear-cache cache-name="transactional"/>
      <!-- Again, preload the cache with data -->
      <load-data num-entries="10000" cache-selector="all:default"/>
      <load-data num-entries="10000" cache-selector="all:transactional"/>

      <!-- 10, 20 and 30 threads will execute random request for 1 minute against the default cache -->
      <!-- <repeat from="10" to="30" inc="10"> -->
      <repeat times="3">
         <!-- num-threads-per-node="${repeat.counter}" -->
         <basic-operations-test test-name="without-transactions" amend-test="true" use-transactions="NEVER"
                                duration="10s" num-threads-per-node="40">
            <cache-selector>all:default</cache-selector>
            <key-selector>
               <concurrent-keys total-entries="10000"/>
            </key-selector>
         </basic-operations-test>
         <basic-operations-test test-name="with-transactions" amend-test="true" use-transactions="IF_TRANSACTIONAL"
                                duration="10s" num-threads-per-node="40">
            <cache-selector>all:transactional</cache-selector>
            <key-selector>
               <concurrent-keys total-entries="10000"/>
            </key-selector>
         </basic-operations-test>
      </repeat>

      <!-- Stop JVM monitoring -->
      <jvm-monitor-stop/>
   </scenario>

   <!-- How the statistics are reported -->
   <reports>
      <!-- Produce CSV statistics report -->
      <reporter type="csv"/>
      <!-- Produce HTML statistics report -->
      <reporter type="html"/>
      <!-- Store Java-serialized version of the results that can be used to re-run the report -->
      <reporter type="serialized"/>
   </reports>

</benchmark>
